"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9409],{7840:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});var i=s(4848),r=s(8453);const o={title:"Configuration"},c=void 0,t={id:"config",title:"Configuration",description:"Inside a command, this.config provides useful properties you can use in your command. Here are a list of its methods and properties:",source:"@site/../docs/config.md",sourceDirName:".",slug:"/config",permalink:"/docs/config",draft:!1,unlisted:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/config.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:1711121897,formattedLastUpdatedAt:"Mar 22, 2024",frontMatter:{title:"Configuration"},sidebar:"docs",previous:{title:"Command Flags",permalink:"/docs/flags"},next:{title:"Topics",permalink:"/docs/topics"}},l={},d=[{value:"Custom User Configuration",id:"custom-user-configuration",level:2}];function a(n){const e={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:["Inside a command, ",(0,i.jsx)(e.code,{children:"this.config"})," provides useful properties you can use in your command. Here are a list of its methods and properties:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"name"})," - name of CLI"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"version"})," - Version of the CLI."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"pjson"})," - Parsed and ",(0,i.jsx)(e.a,{href:"https://github.com/npm/normalize-package-data",children:"normalized"})," CLI ",(0,i.jsx)(e.code,{children:"package.json"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"bin"})," - CLI bin name"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"binAliases"})," - An array of strings that will all execute the CLI's bin. This is useful for backwards compatibility and for CLIs built with installers or tarballs. For npm-installed CLIs, change the ",(0,i.jsx)(e.code,{children:"bin"})," property in ",(0,i.jsx)(e.code,{children:"package.json"})," instead. See ",(0,i.jsx)(e.a,{href:"https://oclif.io/docs/aliases",children:"Bin Aliases"})," for more information."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"nsisCustomization"})," - A path to a .nsis file that's used to customize the installer for Windows. See ",(0,i.jsx)(e.a,{href:"https://github.com/oclif/nsis-custom",children:"nsis-custom"})," for more information."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"cacheDir"})," - CLI cache directory","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["macOS: ",(0,i.jsx)(e.code,{children:"~/Library/Caches/mycli"})]}),"\n",(0,i.jsxs)(e.li,{children:["Unix: ",(0,i.jsx)(e.code,{children:"~/.cache/mycli"})]}),"\n",(0,i.jsxs)(e.li,{children:["Windows: ",(0,i.jsx)(e.code,{children:"%LOCALAPPDATA%\\mycli"})]}),"\n",(0,i.jsxs)(e.li,{children:["Can be overridden with ",(0,i.jsx)(e.code,{children:"XDG_CACHE_HOME"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"configDir"})," - CLI config directory","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Unix: ",(0,i.jsx)(e.code,{children:"~/.config/mycli"})]}),"\n",(0,i.jsxs)(e.li,{children:["Windows: ",(0,i.jsx)(e.code,{children:"%LOCALAPPDATA%\\mycli"})]}),"\n",(0,i.jsxs)(e.li,{children:["Can be overridden with ",(0,i.jsx)(e.code,{children:"XDG_CONFIG_HOME"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"dataDir"})," - CLI data directory","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Unix: ",(0,i.jsx)(e.code,{children:"~/.data/mycli"})]}),"\n",(0,i.jsxs)(e.li,{children:["Windows: ",(0,i.jsx)(e.code,{children:"%LOCALAPPDATA%\\mycli"})]}),"\n",(0,i.jsxs)(e.li,{children:["Can be overridden with ",(0,i.jsx)(e.code,{children:"XDG_DATA_HOME"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"dirname"})," - dirname used with ",(0,i.jsx)(e.code,{children:"cacheDir|configDir|dataDir"}),". Can be overridden in ",(0,i.jsx)(e.code,{children:"package.json"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"errlog"})," - path to error log inside of ",(0,i.jsx)(e.code,{children:"cacheDir"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"home"})," - user home directory"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"platform"})," - operating system ",(0,i.jsx)(e.code,{children:"darwin|linux|win32"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"arch"})," - process architecture ",(0,i.jsx)(e.code,{children:"x64|x86"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"shell"})," - current shell in use"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"userAgent"})," - user-agent intended for http calls. example: ",(0,i.jsx)(e.code,{children:"mycli/1.2.3 (darwin-x64) node-9.0.0"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"windows"})," - boolean"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"topicSeparator"})," - the separator to use between topics - only colons (",(0,i.jsx)(e.code,{children:'":"'}),") and spaces (",(0,i.jsx)(e.code,{children:'" "'}),") are supported."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"debug"})," - set to 1 if debug is enabled (with ",(0,i.jsx)(e.code,{children:"${BIN}_DEBUG=1"})," or ",(0,i.jsx)(e.code,{children:"DEBUG=$BIN"}),"). In the future this may be used for multiple debug levels."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"npmRegistry"})," - current npm registry to use with the ",(0,i.jsx)(e.a,{href:"https://github.com/oclif/plugin-plugins",children:"plugins"})," plugin"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"plugins"})," - loaded plugins"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"commands"})," - all commands in CLI"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"default"})," - default cli command"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"topics"})," - all topics in CLI"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"commandIDs"})," - string IDs of all commands"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"async runHook(event, opts)"})," - trigger a hook"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"custom-user-configuration",children:"Custom User Configuration"}),"\n",(0,i.jsxs)(e.p,{children:["Often it's useful to have a custom configuration for your users. One way to implement this is to read a ",(0,i.jsx)(e.code,{children:"config.json"})," file from the CLI's config directory:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"import {Command} from '@oclif/core'\nimport * as fs from 'fs-extra'\nimport * as path from 'path'\n\nexport class extends Command {\n  async run() {\n    const userConfig = await fs.readJSON(path.join(this.config.configDir, 'config.json'))\n\n    this.log('User config:')\n    console.dir(userConfig)\n  }\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["To share this logic between different commands, use a ",(0,i.jsx)(e.a,{href:"/docs/base_class",children:"base class"}),"."]})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(a,{...n})}):a(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>c,x:()=>t});var i=s(6540);const r={},o=i.createContext(r);function c(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:c(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);