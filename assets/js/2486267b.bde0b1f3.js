"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9562],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(r),m=o,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return r?n.createElement(f,i(i({ref:t},l),{},{components:r})):n.createElement(f,i({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6432:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>f,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],s={title:"Spinner"},c=void 0,p={unversionedId:"spinner",id:"spinner",title:"Spinner",description:"@oclif/core provides a simple ux.action, for more complex progress indicators we recommend using the listr library.",source:"@site/../docs/spinner.md",sourceDirName:".",slug:"/spinner",permalink:"/docs/spinner",draft:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/spinner.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:1710778807,formattedLastUpdatedAt:"Mar 18, 2024",frontMatter:{title:"Spinner"},sidebar:"docs",previous:{title:"Prompting",permalink:"/docs/prompting"},next:{title:"Table",permalink:"/docs/table"}},l={},u=[{value:"<code>ux.action</code>",id:"uxaction",level:2},{value:"listr",id:"listr",level:2}],d={toc:u},m="wrapper";function f(e){var t=e.components,s=(0,o.Z)(e,i);return(0,a.kt)(m,(0,n.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/oclif/core"},"@oclif/core")," provides a simple ",(0,a.kt)("inlineCode",{parentName:"p"},"ux.action"),", for more complex progress indicators we recommend using the ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/listr"},"listr")," library."),(0,a.kt)("h2",{id:"uxaction"},(0,a.kt)("inlineCode",{parentName:"h2"},"ux.action")),(0,a.kt)("p",null,"Shows a basic spinner"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {Command, ux} from '@oclif/core'\n\nexport class MyCommand extends Command {\n  async run() {\n    // start the spinner\n    ux.action.start('starting a process')\n    // do some action...\n    // stop the spinner\n    ux.action.stop() // shows 'starting a process... done'\n\n    // show on stdout instead of stderr\n    ux.action.start('starting a process', 'initializing', {stdout: true})\n    // do some action...\n    // stop the spinner with a custom message\n    ux.action.stop('custom message') // shows 'starting a process... custom message'\n  }\n}\n")),(0,a.kt)("p",null,"This degrades gracefully when not connected to a TTY. It queues up any writes to stdout/stderr so they are displayed above the spinner."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"action demo",src:r(1305).Z,width:"563",height:"271"})),(0,a.kt)("h2",{id:"listr"},"listr"),(0,a.kt)("p",null,"Here is an example of the complex workflows supported by ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/listr"},"listr"),"."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"listr demo",src:r(3220).Z,width:"1177",height:"709"})))}f.isMDXComponent=!0},1305:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/action-3dc2f1c9da2526e7dacc7ba55a2e3f5a.gif"},3220:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/listr-fb034a43c5d3159c331547ffba3b6559.gif"}}]);