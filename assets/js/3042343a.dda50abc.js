"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7777],{2443:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>f});var s=a(4848),t=a(8453);const l={title:"Command Flags"},o=void 0,i={id:"flags",title:"Command Flags",description:"Flag options are non-positional arguments passed to the command. Flags can either be option flags which take an argument, or boolean flags which do not. An option flag must have an argument.",source:"@site/../docs/flags.md",sourceDirName:".",slug:"/flags",permalink:"/docs/flags",draft:!1,unlisted:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/flags.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:1711137687,formattedLastUpdatedAt:"Mar 22, 2024",frontMatter:{title:"Command Flags"},sidebar:"docs",previous:{title:"Command Arguments",permalink:"/docs/args"},next:{title:"Configuration",permalink:"/docs/config"}},r={},f=[{value:"Custom Flags",id:"custom-flags",level:2},{value:"Alternative Flag Inputs",id:"alternative-flag-inputs",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Flag options are non-positional arguments passed to the command. Flags can either be option flags which take an argument, or boolean flags which do not. An option flag must have an argument."}),"\n",(0,s.jsx)(n.p,{children:"For example, if this command was run like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ mycli --force --file=./myfile\n"})}),"\n",(0,s.jsx)(n.p,{children:"It would be declared like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import {Command, Flags} from '@oclif/core'\n\nexport class MyCLI extends Command {\n  static flags = {\n    // can pass either --force or -f\n    force: Flags.boolean({char: 'f'}),\n    file: Flags.string(),\n  }\n\n  async run() {\n    const {flags} = await this.parse(MyCLI)\n    if (flags.force) console.log('--force is set')\n    if (flags.file) console.log(`--file is: ${flags.file}`)\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["oclif supports a wide range of ",(0,s.jsx)(n.a,{href:"#alternative-flag-inputs",children:"alternative flag inputs"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:"Here are the options flags can have:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"static flags = {\n  name: Flags.string({\n    char: 'n',                                   // shorter flag version\n    summary: 'brief summary',                    // help summary for flag\n    helpGroup: 'THE BEST FLAGS',                 // Put flag into THE BEST FLAGS group in help\n    description: 'in-depth overview',            // help description for flag\n    hidden: false,                               // hide from help\n    multiple: false,                             // allow setting this flag multiple times\n    env: 'MY_NAME',                              // default to value of environment variable\n    options: ['a', 'b'],                         // only allow the value to be from a discrete set\n    parse: async input => 'output',              // instead of the user input, return a different value\n    default: 'world',                            // default value if flag not passed (can be an async function that returns a string or undefined)\n    defaultHelp: 'a dynamic value'               // dyanmic default value to show in help output (e.g. current working directory). Can be an async function that returns a string or undefined\n    required: false,                             // make flag required\n    aliases: ['username', 'u'],                  // aliases for the flag - can be short char or long flags\n    deprecateAliases: false,                     // emit deprecation warning anytime a flag alias is provided\n    dependsOn: ['extra-flag'],                   // this flag requires another flag\n    exclusive: ['extra-flag'],                   // this flag cannot be specified alongside this other flag\n    exactlyOne: ['extra-flag', 'another-flag'],  // exactly one of these flags must be provided\n    relationships: [                             // define complex relationships between flags\n      // Make this flag dependent on all of these flags\n      {type: 'all', flags: ['flag-one', 'flag-two']}\n      // Make this flag dependent on at least one of these flags\n      {type: 'some', flags: ['flag-three', 'flag-four']}\n      // Make this flag exclusive of all these flags\n      {type: 'none', flags: ['flag-five', 'flag-six']}\n\n      // Make this flag dependent on all of these flags\n      {type: 'all', flags: [\n        'flag-one',\n        'flag-two',\n        // Include flag-seven but only when flag-eight is equal to FooBar\n        {name: 'flag-seven', when: async (flags) => flags['flag-eight'] === 'FooBar'}\n      ]}\n    ]\n  }),\n\n  // flag with no value (-f, --force)\n  force: Flags.boolean({\n    char: 'f',                    // short character for flag\n    default: true,                // default value if flag not passed (can be a function that returns a boolean)\n    env: 'MY_NAME',               // default value to the value of an environment variable\n    // boolean flags may be reversed with `--no-` (in this case: `--no-force`).\n    // The flag will be set to false if reversed. This functionality\n    // is disabled by default, to enable it:\n    // allowNo: true\n  }),\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"custom-flags",children:"Custom Flags"}),"\n",(0,s.jsx)(n.p,{children:"For larger CLIs, it can be useful to declare a custom flag that can be shared amongst multiple commands. Here is an example of a custom flag:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// src/flags.ts\nimport {Flags} from '@oclif/core'\n\nclass Team {\n  public name: string;\n  // etc...\n}\n\nfunction getTeam(): Promise<Team> {\n  // imagine this reads a configuration file or something to find the team\n  return new Team()\n}\n\nexport const team = Flags.custom<Team>({\n  char: 't',\n  description: 'team to use',\n  default: () => getTeam(),\n})\n\n// src/commands/mycommand.ts\nimport {team} from '../flags'\nimport {Command} from '@oclif/core'\n\nexport class MyCLI extends Command {\n  static flags = {\n    team: team(),\n  }\n\n  async run() {\n    const {flags} = await this.parse(MyCLI)\n    if (flags.team) console.log(`--team is ${flags.team.name}`)\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"In the Salesforce CLI we make heavy use of custom flags. For example,"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.a,{href:"https://salesforcecli.github.io/sf-plugins-core/functions/flags_salesforceId.salesforceIdFlag.html",children:(0,s.jsx)(n.code,{children:"salesforceId"})})," flag that ensures the provided string is a valid Salesforce Id."]}),"\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.a,{href:"https://salesforcecli.github.io/sf-plugins-core/functions/flags_duration.durationFlag.html",children:(0,s.jsx)(n.code,{children:"duration"})})," flag that converts a provided integer into a ",(0,s.jsx)(n.code,{children:"Duration"})," instance that we use for working with time based values."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["These and more are located ",(0,s.jsx)(n.a,{href:"https://github.com/salesforcecli/sf-plugins-core/tree/main/src/flags",children:"here"})," if you want to see more examples. You can also read the ",(0,s.jsx)(n.a,{href:"https://salesforcecli.github.io/sf-plugins-core/",children:"API docs"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"alternative-flag-inputs",children:"Alternative Flag Inputs"}),"\n",(0,s.jsxs)(n.p,{children:["Here are some other ways the user can use input flags. This is assuming the command has flags like ",(0,s.jsx)(n.code,{children:"-f, --file=file"})," and ",(0,s.jsx)(n.code,{children:"-v, --verbose"})," (string and boolean flag):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh-session",children:"$ mycli --verbose\n$ mycli -v\n$ mycli --file=foo\n$ mycli --file foo\n$ mycli -f foo\n$ mycli -f=foo\n$ mycli -ffoo\n$ mycli -vffoo\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The last one seems a little odd at first glance, but it's relatively standard in unix and makes commands like ",(0,s.jsx)(n.code,{children:"tar -xvzfmytarball.tar.gz"})," possible."]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var s=a(6540);const t={},l=s.createContext(t);function o(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);