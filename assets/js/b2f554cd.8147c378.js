"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2022/01/12/announcing-oclif-v2","metadata":{"permalink":"/blog/2022/01/12/announcing-oclif-v2","source":"@site/blog/2022-01-12-announcing-oclif-v2.md","title":"Announcing oclif v2!","description":"Hello and happy new year! It\'s our great pleasure to announce that we have released oclif v2, which uses the new @oclif/core library! \ud83c\udf89","date":"2022-01-12T00:00:00.000Z","formattedDate":"January 12, 2022","tags":[],"readingTime":4.48,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Announcing oclif v2!"},"nextItem":{"title":"Introducing @oclif/core","permalink":"/blog/2021/03/01/introducing-oclif-core"}},"content":"Hello and happy new year! It\'s our great pleasure to announce that we have released oclif v2, which uses the new [@oclif/core](https://github.com/oclif/core) library! \ud83c\udf89\\n\\noclif v2 includes many changes that improve the experience of both creating and using an oclif CLI.\\n\\nGoing forward, we don\'t plan to make any updates to oclif v1 and its corresponding libraries, except for critical security fixes. See the [compatibility matrix](#compatibility-matrix) for a list of these libraries. In order to give developers time to migrate from v1 to v2, we\'re not completely dropping support yet. But at some point in the future we\'ll archive the v1 repositories and deprecate their versions on npm.\\n\\n## What\u2019s changing?\\n\\n### Repository Changes\\n\\nAll repositories under the [oclif org](https://github.com/oclif/) now use `main` as their primary branch and `oclif-v1` as the legacy branch. The `main`  branch corresponds to oclif v2 and the `oclif-v1` branch to oclif v1. If you find any repos that don\u2019t have a `main` branch, you can safely assume that they\'re not used in oclif v2 and will be deprecated in the future.\\n\\n### Consolidating Tools & Libraries\\n\\nThe [`oclif-dev`](https://github.com/oclif/dev-cli) CLI has now been incorporated into [`oclif`](https://github.com/oclif/oclif). You now no longer need to install a separate package to manage your entire CLI\u2019s lifecycle.\\n\\nThe following libraries have been consolidated under [`@oclif/core`](https://github.com/oclif/core) and will be deprecated at some point in the future. Read the [migration guide](https://github.com/oclif/core/blob/main/MIGRATION.md) to learn how to update your CLI or plugin to use the new core library.\\n\\n* `@oclif/command`\\n* `@oclif/config`\\n* `@oclif/error`\\n* `@oclif/help`\\n* `@oclif/parser`\\n\\n### No more single vs multi command CLIs\\n\\nThere\'s only one \\"type\\" of oclif v2 CLI, but it can have as few or as many commands as a developer wants. As a result, there\u2019s only one command to generate CLIs, `oclif generate`, as opposed to the old `oclif single` and `oclif multi` commands.\\n\\n### Node > 12\\n\\nTo ensure oclif CLIs are as secure as possible, all v2 libraries and plugins support only Node 12 or higher as of now. Going forward, they\'ll support only Node Maintenance or higher, as defined by Node\'s release schedule here: https://nodejs.org/en/about/releases/.\\n\\n## What\u2019s new?\\n\\n### New example CLI\\n\\n[`oclif-hello-world`](https://github.com/oclif/hello-world/) is our new example repo. This is also the repo that\'s [used as a template](https://github.com/oclif/oclif/blob/edc6616e51/src/generators/cli.ts#L74) when running `oclif generate` to create a new CLI. This repo will always be able to be referenced as an example of what an oclif v2 CLI should look like.\\n\\n### Spaced commands\\n\\noclif CLIs can now use spaces, instead of colons, to separate topics and subcommands. To enable this feature, simply add `\u201ctopicSeparator\\": \\" \\"` to the oclif config in your package.json. See an example in our [example repo](https://github.com/oclif/hello-world/blob/main/package.json#L55).\\n\\n```\\n// Old commands that use :\\n$ mycli do:something\\n```\\n```\\n// New spaced commands\\n$ mycli do something\\n```\\n\\n> Note: Spaced commands are backwards compatible. So if you enable spaced commands for your CLI, users will still be able to use `:` as a separator. This ensures that any existing scripts don\'t break.\\n\\n### New Help Output\\n\\nWe\u2019ve revamped the way command help is outputted to the terminal, making it both easier to implement and easier to read. See the difference between the old help output on the left and the new help output on the right in the screenshots below.\\n\\n<table border=\\"0\\">\\n <tr>\\n    <td>oclif v1</td>\\n    <td>oclif v2</td>\\n </tr>\\n <tr>\\n    <td><img src=\\"/img/2022-01-12-announcing-oclif-v2/sfdx-help.png\\"/></td>\\n    <td><img src=\\"/img/2022-01-12-announcing-oclif-v2/sf-help.png\\"/></td>\\n </tr>\\n</table>\\n\\nNotice that there are new sections for flags and global flags, examples are displayed with better spacing, and there is a section at the bottom called Configuration Variables. This Configuration Variables section is not part of the new help by default. But we\'ve added support for custom help sections, which is what the `sf` CLI uses to create the new section. \\n\\n### Async Command Parsing\\n\\nWe\u2019ve also improved the performance of new CLIs by rewriting how commands are parsed on initialization. The [new parser](https://github.com/oclif/core/blob/main/src/parser/parse.ts) is asynchronous, which makes CLIs with a lot of commands or installed  plugins much faster.\\n\\n## What\u2019s coming next?\\n\\nPart of our charter for the release of oclif v2 includes improving our engagement with the oclif community. We know that over the past couple of years we\u2019ve reduced our involvement, and a lot of issues and PRs have languished in limbo. Hopefully you\u2019ve already seen increased activity and responses from oclif maintainers recently, but if you haven\u2019t, please don\u2019t hesitate to ping us by tagging [@admins](https://github.com/orgs/oclif/teams/admins) in oclif repos.\\n\\nWe also want to start interviewing members of the oclif community to acquire feedback and prioritize the features and fixes you deem most important!\\n\\nBest,\\n\\nThe oclif team\\n\\n<br/>\\n\\n### Reference material \\n\\n#### Migration Guide\\n\\nThis guide explains how to upgrade a CLI or plugin from the old oclif v1 libraries to the new `@oclif/core` library that oclif v2 uses.\\n\\nhttps://github.com/oclif/core/blob/main/MIGRATION.md\\n\\n#### Compatibility Matrix\\n\\nThe following matrix shows how the v1 libraries and plugins relate to the new v2 ones. Use this matrix as a guide to know what to drop and which versions to switch when upgrading your plugins and CLIs to v2.\\n\\n| | oclif \\"v1\\" | oclif \\"v2\\" |\\n| - | - | -|\\n| Utility CLIs | oclif@<2<br/>@oclif/dev-cli@<2 | oclif@>=2\\n| Main packages | @oclif/command<br/>@oclif/config<br/>@oclif/errors<br/>@oclif/parser<br/>@oclif/plugin-help<br/> | @oclif/core@>=1\\n| Node LTS | Node v8-14 | Node v12+ (at time of writing) |\\n| TypeScript | typescript@<4 | typescript@>=4 |\\n| Main plugins | @oclif/plugin-autocomplete@<1<br/>@oclif/plugin-commands@<2<br/>@oclif/plugin-help@<4<br/>@oclif/plugin-not-found@<2<br/>@oclif/plugin-plugins@<2<br/>@oclif/plugin-update@<2<br/>plugin-warn-if-update-available@<2<br/>plugin-which@<2<br/> | @oclif/plugin-autocomplete@>=1<br/>@oclif/plugin-commands@>=2<br/>@oclif/plugin-help@>=4<br/>@oclif/plugin-not-found@>=2<br/>@oclif/plugin-plugins@>=2<br/>@oclif/plugin-update@>=2<br/>@oclif/plugin-warn-if-update-available@>=2<br/>@oclif/plugin-which@>=2<br/> |"},{"id":"/2021/03/01/introducing-oclif-core","metadata":{"permalink":"/blog/2021/03/01/introducing-oclif-core","source":"@site/blog/2021-03-01-introducing-oclif-core.md","title":"Introducing @oclif/core","description":"Greetings!","date":"2021-03-01T00:00:00.000Z","formattedDate":"March 1, 2021","tags":[],"readingTime":2.18,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Introducing @oclif/core"},"prevItem":{"title":"Announcing oclif v2!","permalink":"/blog/2022/01/12/announcing-oclif-v2"},"nextItem":{"title":"oclif Summer Update","permalink":"/blog/2020/08/26/summer-update"}},"content":"Greetings!\\n\\nWe hope this blog post finds you well.\\n\\n### Introducing...\\n\\nWe are excited to announce the next iteration of the oclif project today: `@oclif/core`.\\n\\nWe have learned a lot in the last three years of developing oclif, developing on oclif and supporting millions of command runs a day via Heroku and Salesforce CLIs.\\n`@oclif/core` (\\"Core\\") simplifies the oclif development experience and introduces highly requested new features.\\n\\nCore combines the essential oclif packages into one \\"core\\" package, aptly named `@oclif/core`.\\n\\nCore also introduces:\\n- A default command option\\n- Colon or space command syntax\\n- Async command parsing\\n- Command piping to arguments\\n\\nWith the introduction of default command functionality, Core simplifies the oclif project and removes the notion of single or multi command CLIs. Core CLIs can have 1 or many commands.\\n\\nAlong with Core, we moved the oclif-dev CLI into the oclif CLI creating a single \\"utility\\" CLI. This CLI also introduces a new AWS S3 compatible publishing scheme.\\n\\n### What to expect in the near future\\n\\nCore is in pre-release beta and being actively developed for new internal Salesforce CLIs.\\n\\nMuch documentation needs to be written in the coming months including migration paths. Migration onto Core should be as painless as possible with many exports remaining entirely unchanged. Look for forthcoming blog posts and documentation on [oclif.io](https://oclif.io).\\n\\nEarly this summer, tentively June 1, we will release Core v1. Core\'s release will coincide with major bumps to many other oclif plugin packages. See the compatibility matrix below.\\n\\nAt Core\'s v1 release, the current \\"main\\" oclif packages (namely: command, config, errors & parser) will go into maintenance mode until Jan 2022. They will receive _only_ bug and security fixes and they remain compatible with current versions of the oclif and oclif-dev CLIs. Afterwhich, they will be archived.\\n\\nCompanioning Core, the next major release of the oclif CLI (literally `oclif@2`) will generate Core CLIs.\\n\\n### Going forward\\n\\nWe are excited to release Core! We invite you to poke around the [Core repo](https://github.com/oclif/core). It may appear to be a big change but Core keeps what you already enjoy about oclif while reducing development complexity, project dependencies, package coupling and bundle size and introduces many requested features previously too prickly to weave into the current oclif architecture.\\n\\nBest,\\n\\nThe oclif team\\n\\n#### Reference: Compatibility matrix\\n\\n| | oclif \\"v1\\" | oclif \\"Core\\" |\\n| - | - | -|\\n| Utility CLIs | oclif@<2<br/>@oclif/dev-cli@<2 | oclif@>=2\\n| Main packages | @oclif/core@<2<br/>@oclif/config@<2<br/>@oclif/errors@<2<br/>@oclif/parser@<4<br/>@oclif/plugin-help@<4<br/> | @oclif/core@>=1\\n| Node LTS | Node v8-14 | Node v12+ |\\n| TypeScript | typescript@<4 | typescript@>=4 |\\n| Main plugins | @oclif/plugin-autocomplete@<1<br/>@oclif/plugin-commands@<2<br/>@oclif/plugin-help@<4<br/>@oclif/plugin-not-found@<2<br/>@oclif/plugin-plugins@<2<br/>@oclif/plugin-update@<2<br/>plugin-warn-if-update-available@<2<br/>plugin-which@<2<br/> | @oclif/plugin-autocomplete@>=2<br/>@oclif/plugin-commands@>=2<br/>@oclif/plugin-help@>=4<br/>@oclif/plugin-not-found@>=2<br/>@oclif/plugin-plugins@>=2<br/>@oclif/plugin-update@>=2<br/>@oclif/plugin-warn-if-update-available@>=2<br/>@oclif/plugin-which@>=2<br/> |"},{"id":"/2020/08/26/summer-update","metadata":{"permalink":"/blog/2020/08/26/summer-update","source":"@site/blog/2020-08-26-summer-update.md","title":"oclif Summer Update","description":"Hello oclif developers! We hope you are all doing well.","date":"2020-08-26T00:00:00.000Z","formattedDate":"August 26, 2020","tags":[],"readingTime":1.355,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"oclif Summer Update"},"prevItem":{"title":"Introducing @oclif/core","permalink":"/blog/2021/03/01/introducing-oclif-core"},"nextItem":{"title":"Pretty Printable Errors","permalink":"/blog/2020/07/01/pretty-printable-errors"}},"content":"Hello oclif developers! We hope you are all doing well.\\n\\nEarlier this year, we started our planning for oclifconf v2 and, like all conference, had to change course. We opted not to hold a virtual conference, however, we wanted to take some time to highlight a few oclif features shipped this year.\\n\\n## Feature: Help templating\\n\\nOne of the most requested features, help templating enables oclif developers to customize the help output for their CLI.\\n\\nRead [the announcement](/blog/introducing-custom-help-classes).\\n\\n## Feature: Custom error delegation\\n\\nThis feature both improved how oclif throws and handles errors and allows oclif developers to overwrite or interject in oclif\u2019s error handling.\\n\\nRead [the announcement](/blog/2020/07/01/pretty-printable-errors).\\n\\n## Feature: postrun hooks\\n\\nWe have added a new lifecycle event `postrun`. Your CLI can now run a hook after a command has ran.\\n\\nSee our [hook documentation](/docs/hooks).\\n\\n## Feature: Root index command\\n\\nPreviously, oclif would display CLI help if only the binary name with no command ID was invoked, oclif now supports a \\"root index\\" command. If present, a command defined at `src/commands/index.ts` will be run if no command ID is found.\\n\\n## 1 million weekly downloads\\n\\nWhile exact oclif usage metrics are hard to pin down, we use npm download statistics of oclif packages as a rough approximation. Earlier this year, oclif\'s command package hit 1 million weekly downloads for the first time!\\n\\n\\nThis year has been presented its challenges on everyone. We want to thank you, oclif developers, whom have taken the time to use and improve the oclif project. We look forward to seeing you all - in person - in the future!\\n\\nAll our best,\\n\\nThe oclif team"},{"id":"/2020/07/01/pretty-printable-errors","metadata":{"permalink":"/blog/2020/07/01/pretty-printable-errors","source":"@site/blog/2020-07-01-pretty-printable-errors.md","title":"Pretty Printable Errors","description":"Often CLIs are used as handy tools and when things go wrong it\u2019s useful to have additional context. In oclif we have added a couple of additional properties that can show extra context to the users when an error is displayed. The code, ref and suggestions will now be displayed if they are included. This will work with an existing oclif CLI by adding the latest @oclif/errors and @oclif/core to the CLI\'s package.json dependencies.","date":"2020-07-01T00:00:00.000Z","formattedDate":"July 1, 2020","tags":[],"readingTime":0.995,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Pretty Printable Errors"},"prevItem":{"title":"oclif Summer Update","permalink":"/blog/2020/08/26/summer-update"},"nextItem":{"title":"Customizing Help in oclif","permalink":"/blog/2020/05/05/introducing-custom-help-classes"}},"content":"Often CLIs are used as handy tools and when things go wrong it\u2019s useful to have additional context. In oclif we have added a couple of additional properties that can show extra context to the users when an error is displayed. The `code`, `ref` and `suggestions` will now be displayed if they are included. This will work with an existing oclif CLI by adding the latest @oclif/errors and @oclif/core to the CLI\'s package.json dependencies.\\n\\nFor example, using `this.error` with the additional properties:\\n```js\\nclass TestError extends Command {\\n  async run() {\\n    this.error(\\"An error has occurred!\\", {\\n      code: \\"OCLIF_ERR\\",\\n      ref: \\"https://oclif.io/docs/commands#thiserrormessage-string--error-options-code-string-exit-number\\",\\n      suggestions: [\\"Use these extra properties to provide additional context\\"],\\n    })\\n  }\\n}\\n```\\n\\nwould result with the following output:\\n```text\\n\u203a   Error: An error has occurred!\\n\u203a   Code: OCLIF_ERR\\n\u203a   Try this: Use these extra properties to provide additional context\\n\u203a   Reference: https://oclif.io/docs/commands#thiserrormessage-string--error-options-code-string-exit-number\\n```\\n\\nIf these properties are not provided then nothing changes and the CLI will continue to display the single error message output as it did before. Additionally, as part of this exercise we\u2019ve added documentation around [Error Handling in oclif](/docs/error_handling) which should come in handy if the need arises to extend oclif\u2019s default handling of errors."},{"id":"/2020/05/05/introducing-custom-help-classes","metadata":{"permalink":"/blog/2020/05/05/introducing-custom-help-classes","source":"@site/blog/2020-05-05-introducing-custom-help-classes.md","title":"Customizing Help in oclif","description":"Out of the box oclif provides a great help experience for CLIs.","date":"2020-05-05T00:00:00.000Z","formattedDate":"May 5, 2020","tags":[],"readingTime":1.67,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Customizing Help in oclif"},"prevItem":{"title":"Pretty Printable Errors","permalink":"/blog/2020/07/01/pretty-printable-errors"},"nextItem":{"title":"oclif TSLint to ESLint Migration","permalink":"/blog/2019/12/05/oclif-eslint-migration"}},"content":"Out of the box oclif provides a great help experience for CLIs.\\n\\nBut what if, as an oclif developer, you want to customize some or all of the output?\\n\\nYou can now customize your CLI\'s help output by implementing the `HelpBase` abstract class.\\n\\n## Getting started with custom help\\n\\nIf you have not done so yet, update `@oclif/core`.\\n\\n\\n```\\n$ yarn add --latest @oclif/core\\n```\\n\\nTo get started, first define the filepath to your help class in oclif\'s config in package.json. This is a relative path to the help class, without a file extension.\\n\\nFor this example, the help class will be created in a file at \\"[project root]/src/help.ts\\".\\n\\n```\\n{\\n  // ...\\n  \\"oclif\\": {\\n    \\"helpClass\\": \\"./lib/help\\"\\n    // ...\\n  }\\n  // ...\\n}\\n```\\n\\nFrom here there are two paths, implement the `HelpBase` abstract class yourself or overwrite the parts of the default `Help` class you want to customize (ex: how command usage is displayed). We recommend the latter approach but cover both in the new [Help Classes docs](../../../../docs/help_classes).\\n\\n\\n## Separating TOPICS & COMMANDS in the new default `Help` class\\n\\nPreviously, topics and child commands were listed in help output under a single list heading called \\"COMMANDS\\". But we found this can be slightly confusing. Some topics are commands also (a.k.a. topic-commands) while others are simply organizational namespacing (and when ran just show their help).\\n\\nThe new default `Help` class splits the list of children into distinct lists of \\"TOPICS\\" and \\"COMMANDS\\", with the possibility of an item appearing in both if it a topic-command. This makes it clearer what is expected to be ran - \\"COMMANDS\\" - and what is providing structure - \\"TOPICS\\" - when looking at the help output.\\n\\n```\\nVERSION\\n  plugin-help-example/0.0.0 darwin-x64 node-v12.12.0\\n\\nUSAGE\\n  $ plugin-help-example [COMMAND]\\n\\nTOPICS\\n  topic  this is a topic and has child topics or commands\\n\\nCOMMANDS\\n  hello  describe the command here\\n  help   display help for plugin-help-example\\n```\\n\\nWe look forward to seeing what custom help features you implement in your oclif CLIs with this new feature!"},{"id":"/2019/12/05/oclif-eslint-migration","metadata":{"permalink":"/blog/2019/12/05/oclif-eslint-migration","source":"@site/blog/2019-12-05-oclif-eslint-migration.md","title":"oclif TSLint to ESLint Migration","description":"Back in February of this year, plans were announced to deprecate TSLint in favor of ESLint. TSLint\'s goal has become to work toward a \u201cunified developer experience\u201d by supporting ESLint development going forward.","date":"2019-12-05T00:00:00.000Z","formattedDate":"December 5, 2019","tags":[],"readingTime":2.18,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"oclif TSLint to ESLint Migration"},"prevItem":{"title":"Customizing Help in oclif","permalink":"/blog/2020/05/05/introducing-custom-help-classes"},"nextItem":{"title":"oclif\'s Current Node Support","permalink":"/blog/2019/10/31/oclif-node-updates"}},"content":"Back in February of this year, plans were announced to [deprecate TSLint](https://github.com/palantir/tslint/issues/4534) in favor of ESLint. TSLint\'s goal has become to work toward a \u201cunified developer experience\u201d by supporting ESLint development going forward.\\n\\n\\n\\n## What has changed in oclif\\n\\nTo keep inline with the community, oclif has transitioned to ESLint for all our core libraries as well as all our official plugins.\\n\\nStarting in v1.15.x, oclif will now optionally generate projects with ESLint for both TypeScript and JavaScript CLI\u2019s.\\n\\nESLint does require Node to be on stable LTS version, at the time of writing, Node 8.10.x, Node 10.13.x & Node 12.x.x.\\n\\n## How does this affect you\\n\\nExisting CLI\u2019s are unchanged, but any newly generated CLI\'s will only give the option of using ESLint. If you are running tslint in your CLI, we recommend you switch to ESLint as well.\\n\\nIn migrating our projects we took the following steps (for an example of these changes see this [pull request](https://github.com/oclif/githubcli/pull/10)).\\n\\n1. Install eslint\\n\\n    `$ yarn add eslint eslint-config-oclif eslint-config-oclif-typescript --dev`\\n2. Add eslint related files\\n```shell\\n$ echo \'{\\n  \\"extends\\": [\\n    \\"oclif\\",\\n    \\"oclif-typescript\\"\\n  ],\\n  \\"rules\\": {\\n  }\\n}\' > .eslintrc\\n```\\n3. Remove tslint and related packages\\n\\n    `$ yarn remove @oclif/tslint tslint`\\n4. Remove tslint related configuration files\\n\\n    `$ rm tslint.json`\\n5. Change lint script in our package.json from something like:\\n\\n    `\\"lint\\": \\"tsc -p test --noEmit && tslint -p test -t stylish\\"`\\n    \\n    to\\n    \\n    `\\"lint\\": \\"eslint . --ext .ts --config .eslintrc\\"`\\n\\nTo preserve the test compile (tsc -p test --noEmit) we also made the following updates to our scripts:\\n\\n`\\"pretest\\": \\"tsc -p test --noEmit\\"`\\n\\nIn some cases we had our posttest duplicating the same steps as our lint script so it\u2019s cleaner to have it reference the lint job directly with:\\n\\n`\\"posttest\\": \\"yarn lint\\"`\\n\\n\\n6. Run `yarn lint --fix`. This attempts to auto-fix any linting violations automatically. In the case an auto-fix isn\u2019t available it should be fixed manually or ignored (see the [eslint configuration doc](https://eslint.org/docs/user-guide/configuring) for more information) \\n7. Do a search in the codebase for `tslint` and remove any unnecessary tslint disabling comments, like: \\n```javascript\\n/* tslint:disable:object-literal-sort-keys */\\n```\\n\\n\\nIf you are on a version of Node that is not supported by ESLint, you will also need to update your Node engine. ESLint supports Node 8, 10, and 12 so you should upgrade to the most recent Node version compatible with your CLI and also supported by ESLint (see ESLint\'s [Installation and Usage](https://www.npmjs.com/package/eslint#installation-and-usage) instructions).\\n\\n## When will this take effect\\n\\nThese changes have taken effect in oclif v1.15.1. When you generate a new CLI or plugin it will now contain configuration for ESLint instead of TSLint."},{"id":"/2019/10/31/oclif-node-updates","metadata":{"permalink":"/blog/2019/10/31/oclif-node-updates","source":"@site/blog/2019-10-31-oclif-node-updates.md","title":"oclif\'s Current Node Support","description":"To maintain a healthy project trajectory, oclif follows and supports Node Active LTS release, currently Node 10 & Node 12. This means ensuring that oclif continues to play nice with coming Active LTS Node versions and other packages in the ecosystem. Moving forward also means leaving older versions behind. Starting in 2020, Node will stop maintaining Node 8 and it is our intent at that time to also follow suit. Let\u2019s take a look at a few ways we will be supporting these changes.","date":"2019-10-31T00:00:00.000Z","formattedDate":"October 31, 2019","tags":[],"readingTime":2.4,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"oclif\'s Current Node Support"},"prevItem":{"title":"oclif TSLint to ESLint Migration","permalink":"/blog/2019/12/05/oclif-eslint-migration"},"nextItem":{"title":"CLI Flags Explained","permalink":"/blog/2019/02/20/cli-flags-explained"}},"content":"To maintain a healthy project trajectory, oclif follows and supports [Node Active LTS release](https://nodejs.org/en/about/releases/), currently Node 10 & Node 12. This means ensuring that oclif continues to play nice with coming Active LTS Node versions and other packages in the ecosystem. Moving forward also means leaving older versions behind. Starting in 2020, Node will stop maintaining [Node 8](https://github.com/nodejs/Release#release-schedule) and it is our intent at that time to also follow suit. Let\u2019s take a look at a few ways we will be supporting these changes.\\n\\n## CI Environments\\n\\nCLIs created with the oclif cli going forward will be generated with a CircleCI configuration with Node 10 & 12 and an Appveyor configuration using Node 10. We have also added Node latest to CircleCi to be an early warning detection against coming Node changes (Node latest is managed by CircleCI).\\n\\nWe have already updated every oclif repo\'s CI configs to reflect this.\\n\\nIf your existing CLI uses either Appveyor or CircleCI you can update your config files also, like so:\\n\\n### .circleci/config.yml\\n\\nYour CircleCI config should contain a `node-latest` job, aliased as `test`. From this, there should be two extensions of this job for the Active LTS Node versions, Node 10 and Node 12.\\n\\n```\\n  node-10:\\n    <<: *node-latest\\n    docker:\\n      - image: node:10\\n  node-12:\\n    <<: *node-latest\\n    docker:\\n      - image: node:12\\n```\\n\\nNotice that these declarations only change the Docker Node images used to run that job.\\n\\nAdditionally, the jobs listed within workflows must also be updated to reflect our changes in configuration:\\n\\n```\\n    jobs:\\n      - node-latest\\n      - node-10\\n      - node-12\\n```\\n\\n### appveyor.yml\\n\\nFor appveyor we are currently only testing the oldest Active LTS Node version, Node 10. Update the `nodejs_version` proppert in your appveyor.yml file to reflect this.\\n\\n```\\nenvironment:\\n  nodejs_version: \\"10\\"\\n```\\n\\n\\n## Deprecating Node 8 & Updating packge.json engines\\n\\nIn Jan 2020, Node will end its Node 8 maintenance. We will follow suit by setting the package.json engine property in oclif packages to `>=10` and bumping the package\'s major versions.\\n\\nDepending on how you ship your CLI you may wish to also bump the engines version in your CLI\'s package.json. You can read more about the implications of the engines property configuration in the [npm documentation](https://docs.npmjs.com/files/package.json#engines).\\n\\nAlso consider distributing your CLI with [its own Node version](https://oclif.io/docs/releasing#standalone-tarballs).\\n\\n## Packaged Node Version\\n\\nWhen using dev-cli to pack your CLI it will use the Node version as specified in your package.json under the `oclif.update.node.version` property. This value should reflect an Active LTS Node version (dev-cli does not currently enforce versions).\\n\\n## Supporting the future\\n\\nAs a community we may discover bumps along the way as we upgrade. If you notice something related to oclif please feel free to open an issue or submit a pull request under the relevant oclif package within [the org](https://github.com/oclif).\\n\\nWe look forward to using the latest from Node and the community and keeping oclif healthy along the way."},{"id":"/2019/02/20/cli-flags-explained","metadata":{"permalink":"/blog/2019/02/20/cli-flags-explained","source":"@site/blog/2019-02-20-cli-flags-explained.md","title":"CLI Flags Explained","description":"oclif makes it easy to create a command line interface (CLI) in node. Most commands have parameters \u2014 also known as \\"flags\\", \\"args\\", and sometimes \\"options\\". This blog post explains what these parameters are and when to use them. We also have a new feature that makes it easier for users to detect typos when using parameters.","date":"2019-02-20T00:00:00.000Z","formattedDate":"February 20, 2019","tags":[],"readingTime":4.925,"hasTruncateMarker":false,"authors":[{"name":"Casey Watts and Jeff Dickey"}],"frontMatter":{"author":"Casey Watts and Jeff Dickey","title":"CLI Flags Explained"},"prevItem":{"title":"oclif\'s Current Node Support","permalink":"/blog/2019/10/31/oclif-node-updates"},"nextItem":{"title":"Introducing oclif","permalink":"/blog/2018/03/20/introducing-oclif"}},"content":"`oclif` makes it easy to create a command line interface (CLI) in node. Most commands have **parameters** \u2014 also known as \\"flags\\", \\"args\\", and sometimes \\"options\\". This blog post explains what these parameters are and when to use them. We also have a new feature that makes it easier for users to detect typos when using parameters.\\n\\n_Note the following describes GNU-style flags. Not all CLIs follow this convention, but it is the most commonly used._\\n\\n## Parts of Speech\\n\\nAny command line interface command has a few standard \\"parts of speech\\".  As a user of CLI tools, knowing these parts of speech can help you make fewer typos. It can also help you understand complex commands other people share with you more quickly. If you are designing a CLI tool it is even more important to understand these parts of speech, so you can come up with the most ergonomic interface for your users.\\n\x3c!-- DIAGRAM OF PARTS OF SPEECH EXAMPLE --\x3e\\n\\nOf the many ways you can pass data to a CLI command, three of them are **parameters** that are always to the \\"right\\" of the command. The three types of parameters are **argument**, **short flag**, and **long flag**.\\n\\n### Example `ls`\\nOne of the  most common and simplest unix commands is `ls` which \\"lists\\" the contents of a directory.\\n\\n#### command\\n\\n```\\nls\\n```\\n\\nThis command `ls` works on its own, as a standalone **command**. Without any parameters this command will list the contents of the current folder, using an implied `.` directory.\\n\\n#### argument\\n\\n```\\nls .\\nls ~/code/some-repo-name\\n```\\n\\nIf you pass a command **argument** to this command, like the directory name `.` (current folder) or `~/code/some-repo-name`, it will list the contents of that directory instead.\\n\\nAn argument is anything to the right of a command that is not a flag. An argument can come before or after flags.\\n\\n#### Long flag\\nTo list additional files that are normally hidden (like `~/.bashrc`), you can use a flag on the `ls` command. `ls --all` is the **long flag** form. A long flag always uses a double dash, and it is always represented by multiple characters.\\n\\n```\\nls --all\\nls . --all\\n```\\n\\n#### Short flag\\n\\nThere is also a **short flag** form of this flag: `ls -a`. The `a` is short for `all` in this case. A short flag always uses a single dash, and it is always represented by a single letter.\\n\\n```\\nls -a\\nls . -a\\n```\\n\\nShort flags can **stack** too, so you don\'t need a separate dash for each one. Order does not matter for these, unless passing a flag argument.\\n\\n```\\nls -la\\n```\\n\\n#### Flag arguments\\nMany flags accept an **option**, which is a \\"flag argument\\" (as opposed to a \\"command argument\\"). In general a command\'s parameters can be in any order, but flags that accept options must have the option directly after the flag.\\n\\nFor an example, here the `-x` flag does not accept an option but the `-f` flag does. `archive.tar` is the option being passed to `-f`.\\n\\n```\\ntar -x -f archive.tar\\ntar -xf archive.tar\\n```\\n\\nA flag and its option can be separated by a space ` ` or an equals sign `=`. Interestingly, short flags (but not long flags) can even skip the space, although many people find it much easier to read with the space or equals sign.\\n\\nThese three are all valid and equivalent:\\n\\n```\\ntar -f archive.tar\\ntar -f=archive.tar\\ntar -farchive.tar\\n```\\n\\nLong flags must have a space or equals sign to separate the flag from its option.\\n\\n```\\ngit log --pretty=oneline\\ngit log --pretty oneline\\n```\\n\\n## Other Ways of Passing Data\\n\\nWe\'ve covered **parameters**, which are **arguments**, **short flags** and **long flags**. There are two other ways to pass data to a command: **environment variables** (\\"env vars\\"), or **standard input** (\\"stdin\\"). These won\'t be covered in this blog post.\\n\\n\\n## Designing a Command\\n\\nScenario: we want to design an oclif command that echos an input like \\"Casey\\", and returns \\"hi, Casey!\\". There are many ways the user could pass this in, and here we show an example of each type of input.\\n\\n### argument\\n\\n```\\ngreet-me Casey\\n```\\n\\n### short flag with argument\\n\\n```\\ngreet-me -n Casey\\ngreet-me -n=Casey\\ngreet-me -nCasey\\n```\\n\\n### long flag with argument\\n\\n```\\ngreet-me --name=Casey\\ngreet-me --name Casey\\n```\\n\\n### environment variable\\n\\n```\\nNAME=Casey greet-me\\n```\\n\\n### standard input\\n\\n```\\necho \\"Casey\\" | greet-me\\n```\\n\\n## Command ergonomics\\n\\n### Short flag vs long flag\\nMany CLI commands allow for both long flag and short flag forms. In the Heroku CLI every flag has at least a long flag form and roughly half of the flags also have a short flag form.\\n\\nThe long flag form is easier to read, but takes more characters to type. It is often most useful when you want someone to understand a particular command statement quickly and easily, such as in a README.\\n\\nThe short flag form is quicker to type, and is often better for frequently used commands. Short flags are especially useful when stacking short flags together.\\n\\n\\n\x3c!-- ## Did you mean?\\nIt is really easy to make a typo and use one dash instead of two, or vice versa. This \\"Long flag / short flag mismatch\\" is quite common. We hope that by catching these typos we will help you make fewer typos, save you from frustration, and speed up your development.\\n\\n`oclif` can now detect when you accidentally have the wrong number of dashes for a command, and suggest a change to the command.\\n\\n```\\nheroku config --s\\n> did you mean \\"heroku config -s\\"?\\n```\\n\\n```\\nheroku config -something-long\\n> did you mean \\"heroku config --something-long\\"?\\n```\\n\\n```\\nheroku config ---something-long\\n> did you mean to use FEWER DASHES? (something like this?)\\n```\\n\\nThis is an example of a \\"did you mean?\\" command, like this ruby plugin [did_you_mean](https://github.com/yuki24/did_you_mean).\\n--\x3e"},{"id":"/2018/03/20/introducing-oclif","metadata":{"permalink":"/blog/2018/03/20/introducing-oclif","source":"@site/blog/2018-03-20-introducing-oclif.md","title":"Introducing oclif","description":"Introducing oclif","date":"2018-03-20T00:00:00.000Z","formattedDate":"March 20, 2018","tags":[],"readingTime":0.285,"hasTruncateMarker":false,"authors":[{"name":"Jeff Dickey"}],"frontMatter":{"author":"Jeff Dickey","title":"Introducing oclif"},"prevItem":{"title":"CLI Flags Explained","permalink":"/blog/2019/02/20/cli-flags-explained"}},"content":"![Introducing oclif](/img/2018-03-20-introducing-oclif/header.png)\\n\\nCoding for the browser takes serious time. You need to deal with front-end JS, CSS, design, product, and a ton more. On the other hand, building for a CLI takes a fraction of the effort. This makes CLIs particularly great for prototyping out new functionality, offering admin/internal tools, or power-user functionality.\\n\\n<a class=\\"button\\" href=\\"https://engineering.salesforce.com/open-sourcing-oclif-the-cli-framework-that-powers-our-clis-21fbda99d33a\\">Read More</a>"}]}')}}]);