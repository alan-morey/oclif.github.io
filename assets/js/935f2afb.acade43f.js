"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"Getting Started","items":[{"type":"link","label":"Introduction","href":"/docs/introduction","docId":"introduction"},{"type":"link","label":"Features","href":"/docs/features","docId":"features"},{"type":"link","label":"FAQs","href":"/docs/faqs","docId":"faqs"},{"type":"link","label":"Generator Commands","href":"/docs/generator_commands","docId":"generator_commands"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Architecture","items":[{"type":"link","label":"Command Execution","href":"/docs/command_execution","docId":"command_execution"},{"type":"link","label":"Plugin Loading","href":"/docs/plugin_loading","docId":"plugin_loading"}],"collapsed":true,"collapsible":true},{"type":"category","label":"API Reference","items":[{"type":"link","label":"Commands","href":"/docs/commands","docId":"commands"},{"type":"link","label":"Command Arguments","href":"/docs/args","docId":"args"},{"type":"link","label":"Command Flags","href":"/docs/flags","docId":"flags"},{"type":"link","label":"Configuration","href":"/docs/config","docId":"config"},{"type":"link","label":"Topics","href":"/docs/topics","docId":"topics"},{"type":"link","label":"Topic Separators","href":"/docs/topic_separator","docId":"topic_separator"},{"type":"link","label":"Hooks","href":"/docs/hooks","docId":"hooks"},{"type":"link","label":"Plugins","href":"/docs/plugins","docId":"plugins"},{"type":"link","label":"Help Classes","href":"/docs/help_classes","docId":"help_classes"},{"type":"link","label":"Error Handling","href":"/docs/error_handling","docId":"error_handling"},{"type":"link","label":"JSON","href":"/docs/json","docId":"json"}],"collapsed":true,"collapsible":true},{"type":"category","label":"How to","items":[{"type":"link","label":"Release","href":"/docs/releasing","docId":"releasing"},{"type":"link","label":"Testing","href":"/docs/testing","docId":"testing"},{"type":"link","label":"Running Commands Programmatically","href":"/docs/running_programmatically","docId":"running_programmatically"},{"type":"link","label":"Just-in-Time Plugin Installation","href":"/docs/jit_plugins","docId":"jit_plugins"},{"type":"link","label":"Aliases","href":"/docs/aliases","docId":"aliases"},{"type":"link","label":"NSIS Installer Customization","href":"/docs/nsis-installer_customization","docId":"nsis-installer_customization"},{"type":"link","label":"Custom Base Class","href":"/docs/base_class","docId":"base_class"},{"type":"link","label":"Prompting","href":"/docs/prompting","docId":"prompting"},{"type":"link","label":"Spinner","href":"/docs/spinner","docId":"spinner"},{"type":"link","label":"Table","href":"/docs/table","docId":"table"},{"type":"link","label":"Notifications","href":"/docs/notifications","docId":"notifications"},{"type":"link","label":"Debugging","href":"/docs/debugging","docId":"debugging"},{"type":"link","label":"Flexible Taxonomy","href":"/docs/flexible_taxonomy","docId":"flexible_taxonomy"},{"type":"link","label":"Global Flags","href":"/docs/global_flags","docId":"global_flags"},{"type":"link","label":"Single Command CLI","href":"/docs/single_command_cli","docId":"single_command_cli"},{"type":"link","label":"ESM","href":"/docs/esm","docId":"esm"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Also See","items":[{"type":"link","label":"Examples","href":"/docs/examples","docId":"examples"},{"type":"link","label":"External Links","href":"/docs/external_links","docId":"external_links"},{"type":"link","label":"Related Repositories","href":"/docs/related_repos","docId":"related_repos"},{"type":"link","label":"How We Work","href":"/docs/how_we_work","docId":"how_we_work"},{"type":"link","label":"Feedback","href":"/docs/feedback","docId":"feedback"}],"collapsed":true,"collapsible":true}]},"docs":{"aliases":{"id":"aliases","title":"Aliases","description":"Aliases let you define a string that maps to a command. This command can be run as mycli config, mycli configlist:","sidebar":"docs"},"args":{"id":"args","title":"Command Arguments","description":"Arguments are positional arguments passed to the command. For example, if this command was run with mycli arg1 arg2 it would be declared like this:","sidebar":"docs"},"base_class":{"id":"base_class","title":"Custom Base Class","description":"Use inheritance to share functionality between common commands. Here is an example of a command base class that has some common shared flags.","sidebar":"docs"},"command_execution":{"id":"command_execution","title":"Command Execution","description":"Below is a diagram that outlines at a high level the process that occurs every time a user executes an oclif command.","sidebar":"docs"},"commands":{"id":"commands","title":"Commands","description":"A basic command looks like the following in TypeScript:","sidebar":"docs"},"config":{"id":"config","title":"Configuration","description":"Inside a command, this.config provides useful properties you can use in your command. Here are a list of its methods and properties:","sidebar":"docs"},"debugging":{"id":"debugging","title":"Debugging","description":"Use the debug for debugging. The CLI uses this module for all of its debugging. If you set the environment variable DEBUG=* it will print all the debug output to the screen.","sidebar":"docs"},"error_handling":{"id":"error_handling","title":"Error Handling","description":"oclif handles intentionally - and unintentionally - thrown errors in two places. First in the Command.catch method and then, finally, in the bin/run catch handler where the Error is printed and the CLI exits. This error flow makes it possible for you to control and respond to errors that occur in your CLI as you see fit.","sidebar":"docs"},"esm":{"id":"esm","title":"ESM","description":"If you want to write your CLI or plugins using ESM you just need to make a few changes to your tsconfig.json and bin scripts.","sidebar":"docs"},"examples":{"id":"examples","title":"Examples","description":"Here are some examples to get an idea of how to use oclif in various setups.","sidebar":"docs"},"external_links":{"id":"external_links","title":"External Links","description":"* Salesforce Release Announcement","sidebar":"docs"},"faqs":{"id":"faqs","title":"FAQs","description":"Why Node?","sidebar":"docs"},"features":{"id":"features","title":"Features","description":"Flag/Argument parsing","sidebar":"docs"},"feedback":{"id":"feedback","title":"Feedback","description":"If you have any suggestions or just want to let us know what you think of oclif, send us a message at  or file an issue in our repos.","sidebar":"docs"},"flags":{"id":"flags","title":"Command Flags","description":"Flag options are non-positional arguments passed to the command. Flags can either be option flags which take an argument, or boolean flags which do not. An option flag must have an argument.","sidebar":"docs"},"flexible_taxonomy":{"id":"flexible_taxonomy","title":"Flexible Taxonomy","description":"If you\'d like for your customers to execute commands without adhereing to the defined command taxonomy, you can enable flexibleTaxonomy and add a hook to the oclif section of your package.json:","sidebar":"docs"},"generator_commands":{"id":"generator_commands","title":"Generator Commands","description":"- oclif generate NAME","sidebar":"docs"},"global_flags":{"id":"global_flags","title":"Global Flags","description":"There are some instances where you might want to define a flag once for all of your commands. In this case you can add a global flag to an abstract base Command class. For example,","sidebar":"docs"},"help_classes":{"id":"help_classes","title":"Help Classes","description":"Out of the box oclif provides a great help experience for CLIs. Users can invoke help with the --help flag.","sidebar":"docs"},"hooks":{"id":"hooks","title":"Hooks","description":"oclif exposes lifecycle event hooks such as init and commandnotfound. See below for a list of all the lifecycle events. In addition to these built-in events, you can create your own events and allow commands/plugins to watch for these custom events. It\'s a great way to allow multiple plugins to interact with each other.","sidebar":"docs"},"how_we_work":{"id":"how_we_work","title":"How We Work","description":"oclif is an open-source project built and maintained by Salesforce and an essential component of Salesforce\'s developer experiences, powering millions of users\' CLIs a day via the Salesforce CLI, the Heroku CLI and others.","sidebar":"docs"},"index":{"id":"index","title":"index","description":""},"introduction":{"id":"introduction","title":"Introduction","description":"oclif is a framework for building CLIs in Node. It can be used like a simple flag parser but is capable of much more. It\'s designed to be extensible so that you can easily add plugins such as the update warning plugin or build your own for users to install at runtime.","sidebar":"docs"},"jit_plugins":{"id":"jit_plugins","title":"Just-in-Time Plugin Installation","description":"Sometimes you might want to have a plugin that isn\'t bundled in your CLI but gets installed the first time it\'s executed by the user - we call this just-in-time plugin installation, or JIT for short. This can be useful if you need to reduce the package size of your CLI while still allowing users access to all the plugins.","sidebar":"docs"},"json":{"id":"json","title":"JSON","description":"If you want to use the --json flag to return JSON output to the user, then you can set the enableJsonFlag property on the Command class.","sidebar":"docs"},"notifications":{"id":"notifications","title":"Notifications","description":"Use node-notifier for cross-platform OS notifications.","sidebar":"docs"},"nsis-installer_customization":{"id":"nsis-installer_customization","title":"NSIS Installer Customization","description":"Sometimes you need to verify some dependencies, ensure there are no conflicting CLIs installed, or do some other custom logic before installing your CLI. For npm-scenarios, simply specify a preinstall script. But Windows installers don\'t include this script. You must instead write your own nsis modification to do these checks. See where this custom script gets placed in the installer in the oclif/oclif repo.","sidebar":"docs"},"plugin_loading":{"id":"plugin_loading","title":"Plugin Loading","description":"Below is a diagram that outlines how a plugin is loaded into the CLI.","sidebar":"docs"},"plugins":{"id":"plugins","title":"Plugins","description":"Plugins are a great way to offer experimental functionality, allow users to extend your CLI, break up a CLI into modular components, or share functionality between CLIs.","sidebar":"docs"},"prompting":{"id":"prompting","title":"Prompting","description":"The ux export provides a simple cli.prompt() function, for more complex input prompts, we recommend using the inquirer library.","sidebar":"docs"},"related_repos":{"id":"related_repos","title":"Related Repositories","description":"* @oclif/core - Base library for oclif CLIs or plugins. This can be used directly without the generator.","sidebar":"docs"},"releasing":{"id":"releasing","title":"Release","description":"There are 2 main strategies for releasing oclif CLIs: npm and standalone tarballs. You can publish to one or both.","sidebar":"docs"},"running_programmatically":{"id":"running_programmatically","title":"Running Commands Programmatically","description":"If you need to run a command from another, or programmatically run a command in another codebase, there are a couple options.","sidebar":"docs"},"single_command_cli":{"id":"single_command_cli","title":"Single Command CLI","description":"Sometimes you may want your CLI\'s executable to also be the only command, similar to many bash utilities like ls or cat.","sidebar":"docs"},"spinner":{"id":"spinner","title":"Spinner","description":"@oclif/core provides a simple ux.action, for more complex progress indicators we recommend using the listr library.","sidebar":"docs"},"table":{"id":"table","title":"Table","description":"ux.table","sidebar":"docs"},"testing":{"id":"testing","title":"Testing","description":"Testing in oclif can be done with any testing framework. You can run commands with MyCommand.run() which returns a promise you can wait on.","sidebar":"docs"},"topic_separator":{"id":"topic_separator","title":"Topic Separators","description":"By default, topics will be separated with colons, e.g. mycommand. However, you have the option to use spaces if you prefer, e.g. my awesome command.","sidebar":"docs"},"topics":{"id":"topics","title":"Topics","description":"As CLIs grow it can be useful to nest commands within topics. This is supported simply by placing command files in subdirectories. For example, with the Salesforce CLI we have a topic sf config with commands like sf config set and sf config get. The directory structure looks like this:","sidebar":"docs"}}}')}}]);