"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3454],{6040:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>t,metadata:()=>l,toc:()=>r});var a=s(4848),i=s(8453);const t={title:"Aliases"},o=void 0,l={id:"aliases",title:"Aliases",description:"Command Aliases",source:"@site/../docs/aliases.md",sourceDirName:".",slug:"/aliases",permalink:"/docs/aliases",draft:!1,unlisted:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/aliases.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:1711725606,formattedLastUpdatedAt:"Mar 29, 2024",frontMatter:{title:"Aliases"},sidebar:"docs",previous:{title:"Just-in-Time Plugin Installation",permalink:"/docs/jit_plugins"},next:{title:"NSIS Installer Customization",permalink:"/docs/nsis-installer_customization"}},c={},r=[{value:"Command Aliases",id:"command-aliases",level:2},{value:"Flag Aliases",id:"flag-aliases",level:2},{value:"Bin Aliases",id:"bin-aliases",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"command-aliases",children:"Command Aliases"}),"\n",(0,a.jsxs)(n.p,{children:["Aliases let you define a string that maps to a command. This command can be run as ",(0,a.jsx)(n.code,{children:"mycli config"}),", ",(0,a.jsx)(n.code,{children:"mycli config:index"}),", or ",(0,a.jsx)(n.code,{children:"mycli config:list"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import {Command, Flags} from '@oclif/core'\n\nexport class ConfigIndex extends Command {\n  static aliases = ['config:index', 'config:list']\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:['By default, aliases find the "real" command and just work.  If you\'re providing command aliases for backward compatibility but prefer users to use the "real" command, set ',(0,a.jsx)(n.code,{children:"deprecateAliases"})," to ",(0,a.jsx)(n.code,{children:"true"})," to warn users about the correct name"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"export class ConfigIndex extends Command {\n  static aliases = ['config:index', 'config:list']\n  static deprecateAliases = true\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"flag-aliases",children:"Flag Aliases"}),"\n",(0,a.jsx)(n.p,{children:"Like command aliases, but on an individual flag.  You can alias the name and short character, and optionally emit warnings when aliased names are used."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"export class ConfigIndex extends Command {\n  static flags = {\n    'new-name': Flags.boolean({\n      char: 'c',\n      aliases: ['old-name', 'o'],\n      deprecateAliases: true\n    })\n  }\n}\n\n"})}),"\n",(0,a.jsx)(n.h2,{id:"bin-aliases",children:"Bin Aliases"}),"\n",(0,a.jsxs)(n.p,{children:['Creating a CLI that responds to different names or "aliases" is easy, simply add a ',(0,a.jsx)(n.code,{children:"binAliases"})," property to your CLI's ",(0,a.jsx)(n.code,{children:"oclif"})," property in ",(0,a.jsx)(n.code,{children:"package.json"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "name": "mycli",\n  "version": "0.0.0",\n  "description": "My CLI",\n  "main": "bin/run.js",\n  "bin": {\n    "mycli": "./bin/run.js",\n    "mycli-alias": "./bin/run.js"\n  },\n  "oclif": {\n    "binAliases": ["mycli", "mycli-alias"]\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Adding this property allows your CLI to respond to either of those names, and is used during the bundling and building process when shipping your CLI. Note that the ",(0,a.jsx)(n.code,{children:"bin"})," section was also modified to include both aliases, which is how npm creates bin aliases. To create a unified experience, regardless of the installation method, a CLI author must change both to match. Bin aliases also play nicely with ",(0,a.jsx)(n.code,{children:"@oclif/plugin-autocomplete"}),", so typing an alias and using autocomplete is the same experience as using the original name."]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var a=s(6540);const i={},t=a.createContext(i);function o(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);