"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2863],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1423:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>c,toc:()=>m});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={title:"Running Commands Programmatically"},l=void 0,c={unversionedId:"running_programmatically",id:"running_programmatically",title:"Running Commands Programmatically",description:"If you need to run a command from another, or programmatically run a command in another codebase, there are a couple options.",source:"@site/../docs/running_programmatically.md",sourceDirName:".",slug:"/running_programmatically",permalink:"/docs/running_programmatically",draft:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/running_programmatically.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:1709583362,formattedLastUpdatedAt:"Mar 4, 2024",frontMatter:{title:"Running Commands Programmatically"},sidebar:"docs",previous:{title:"Testing",permalink:"/docs/testing"},next:{title:"Just-in-Time Plugin Installation",permalink:"/docs/jit_plugins"}},p={},m=[{value:"Sharing code with modules",id:"sharing-code-with-modules",level:2},{value:"Calling commands directly",id:"calling-commands-directly",level:2}],d={toc:m},u="wrapper";function g(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"If you need to run a command from another, or programmatically run a command in another codebase, there are a couple options."),(0,o.kt)("p",null,"First, it is generally a bad idea to run a command directly as the command exports a user interface, not a code interface. It's a design smell that should rarely (if ever) be used. Generally speaking, it's better to break up the code so that it can be called directly rather than as a command. We'll show this better method first."),(0,o.kt)("h2",{id:"sharing-code-with-modules"},"Sharing code with modules"),(0,o.kt)("p",null,"For example, if we use ",(0,o.kt)("inlineCode",{parentName:"p"},"sf config list")," as an example, we could have a command that outputs the config vars of an app to the screen like this:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"./src/commands/config/list.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export class ConfigList extends Command {\n  static flags = {\n    app: Flags.string({required: true})\n  }\n\n  async run() {\n    const {flags} = await this.parse(ConfigList)\n    const config = await api.get(`/apps/${flags.app}/config-vars`)\n    for (let [key, value] of Object.entries(config)) {\n      this.log(`${key}=${value}`)\n    }\n  }\n}\n")),(0,o.kt)("p",null,"If we had another command such as ",(0,o.kt)("inlineCode",{parentName:"p"},"sf config update")," that would do some logic then display the config variables using the same logic, we should create a new module that we could call directly:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"./src/commands/config/update.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import {displayConfigVars} from '../displayConfigVars'\n\nexport class ConfigUpdate extends Command {\n  static flags = {\n    app: Flags.string({required: true})\n  }\n\n  async run() {\n    const {flags} = await this.parse(ConfigUpdate)\n    await this.doUpdate(flags.app)\n    await displayConfigVars(flags.app)\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"./src/displayConfigVars.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export async function displayConfigVars(app: string) {\n  const config = await api.get(`/apps/${app}config-vars`)\n  for (let [key, value] of Object.entries(config)) {\n    this.log(`${key}=${value}`)\n  }\n}\n")),(0,o.kt)("p",null,"This is the recommended way to share code. This can be extended further by putting shared code into its own npm package."),(0,o.kt)("h2",{id:"calling-commands-directly"},"Calling commands directly"),(0,o.kt)("p",null,"Still, if you ",(0,o.kt)("em",{parentName:"p"},"really")," want to call a command directly, it's easy to do. You have a couple of options."),(0,o.kt)("p",null,"If you know that the command you want to run is installed in the CLI, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"this.config.runCommand"),". For this, we could write our ",(0,o.kt)("inlineCode",{parentName:"p"},"sf config update")," command like so:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"./src/commands/config/update.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export class ConfigUpdate extends Command {\n  static flags = {\n    app: Flags.string({required: true})\n  }\n\n  async run() {\n    const {flags} = await this.parse(ConfigUpdate)\n    await this.doUpdate(flags.app)\n    await this.config.runCommand('config:list', ['--global'])\n  }\n}\n")),(0,o.kt)("p",null,"Or you could import the command directly and execute it directly like so:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"./src/commands/config/update.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import {ConfigList} from './config/list'\n\nexport class ConfigUpdate extends Command {\n  static flags = {\n    app: Flags.string({required: true})\n  }\n\n  async run() {\n    const {flags} = await this.parse(ConfigUpdate)\n    await this.doUpdate(flags.app)\n    await ConfigList.run(['--global'])\n  }\n}\n")),(0,o.kt)("p",null,"This works because commands have a static ",(0,o.kt)("inlineCode",{parentName:"p"},".run()")," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/oclif/core/blob/main/src/command.ts"},"method on them")," that can be used to instantiate the command and run the instance ",(0,o.kt)("inlineCode",{parentName:"p"},".run()")," method. It takes in the argv as input to the command."))}g.isMDXComponent=!0}}]);