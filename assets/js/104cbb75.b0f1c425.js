"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6471],{8907:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var t=n(4848),i=n(8453);const a={title:"Flexible Taxonomy"},r=void 0,c={id:"flexible_taxonomy",title:"Flexible Taxonomy",description:"If you'd like for your customers to execute commands without adhereing to the defined command taxonomy, you can enable flexibleTaxonomy and add a hook to the oclif section of your package.json:",source:"@site/../docs/flexible_taxonomy.md",sourceDirName:".",slug:"/flexible_taxonomy",permalink:"/docs/flexible_taxonomy",draft:!1,unlisted:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/flexible_taxonomy.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:1711657054,formattedLastUpdatedAt:"Mar 28, 2024",frontMatter:{title:"Flexible Taxonomy"},sidebar:"docs",previous:{title:"Debugging",permalink:"/docs/debugging"},next:{title:"Flag Inheritance",permalink:"/docs/flag_inheritance"}},s={},l=[{value:"Hook Implementation",id:"hook-implementation",level:3}];function d(e){const o={a:"a",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(o.p,{children:["If you'd like for your customers to execute commands without adhereing to the defined command taxonomy, you can enable ",(0,t.jsx)(o.code,{children:"flexibleTaxonomy"})," and add a hook to the ",(0,t.jsx)(o.code,{children:"oclif"})," section of your package.json:"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-json",children:'{\n  "oclif": {\n    "flexibleTaxonomy": true,\n    "hooks": {\n      "command_incomplete": "./dist/hooks/command_incomplete.js"\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(o.p,{children:"There are two main benefits to enabling flexible taxonomy:"}),"\n",(0,t.jsxs)(o.ol,{children:["\n",(0,t.jsxs)(o.li,{children:["It makes your CLI more user-friendly. For example, you might have a command, ",(0,t.jsx)(o.code,{children:"my-cli foobars list"}),". If a user mistakenly enters ",(0,t.jsx)(o.code,{children:"my-cli list foobars"})," then oclif will automatically know that it should execute ",(0,t.jsx)(o.code,{children:"foobars list"})," instead of throwing an error."]}),"\n",(0,t.jsxs)(o.li,{children:["It gives you the opportunity to prompt a user for the right command if they only provide part of a command. This makes individual commands more discoverable, especially if you have a large number of commands. See ",(0,t.jsx)(o.a,{href:"#hook-implementation",children:"Hook Implementation"})," for more details."]}),"\n"]}),"\n",(0,t.jsx)(o.h3,{id:"hook-implementation",children:"Hook Implementation"}),"\n",(0,t.jsxs)(o.p,{children:["When ",(0,t.jsx)(o.code,{children:"flexibleTaxonomy"})," is enabled, oclif will run the ",(0,t.jsx)(o.code,{children:"command_incomplete"})," hook anytime a user enters an incomplete command (e.g. the command is ",(0,t.jsx)(o.code,{children:"one two three"})," but they only entered ",(0,t.jsx)(o.code,{children:"two"}),"). This hook gives you the opportunity to create an interactive user experience."]}),"\n",(0,t.jsxs)(o.p,{children:["This example shows how you can use the ",(0,t.jsx)(o.a,{href:"https://www.npmjs.com/package/inquirer",children:"inquirer"})," package to prompt the user for which command they would like to run:"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-typescript",children:"import { Hook, toConfiguredId, toStandardizedId } from '@oclif/core';\nimport { select } from '@inquirer/prompts';\n\nconst hook: Hook.CommandIncomplete = async function ({\n  config,\n  matches,\n  argv,\n}) {\n  const command = await select({\n    message: 'Which of these commands would you like to run?',\n    choices: matches.map((p) => toConfiguredId(p.id, config)),\n  });\n\n  if (argv.includes('--help') || argv.includes('-h')) {\n    return config.runCommand('help', [toStandardizedId(command, config)]);\n  }\n\n  return config.runCommand(toStandardizedId(command, config), argv);\n};\n\nexport default hook;\n"})}),"\n",(0,t.jsx)(o.p,{children:"This is the prompt that the user would see:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{children:"$ my-cli list\n? Which of these commands did you mean (Use arrow keys)\n\u276f foobars list\n  config list\n  env list\n"})})]})}function m(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>r,x:()=>c});var t=n(6540);const i={},a=t.createContext(i);function r(e){const o=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:o},e.children)}}}]);