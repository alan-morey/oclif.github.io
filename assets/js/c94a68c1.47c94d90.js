"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9147],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),d=a,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(g,i(i({ref:t},p),{},{components:r})):n.createElement(g,i({ref:t},p))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7384:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],s={title:"Command Arguments"},l=void 0,c={unversionedId:"args",id:"args",title:"Command Arguments",description:"Arguments are positional arguments passed to the command. For example, if this command was run with mycli arg1 arg2 it would be declared like this:",source:"@site/../docs/args.md",sourceDirName:".",slug:"/args",permalink:"/docs/args",draft:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/args.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:1709593271,formattedLastUpdatedAt:"Mar 4, 2024",frontMatter:{title:"Command Arguments"},sidebar:"docs",previous:{title:"Commands",permalink:"/docs/commands"},next:{title:"Command Flags",permalink:"/docs/flags"}},p={},u=[],m={toc:u},d="wrapper";function g(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)(d,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Arguments are positional arguments passed to the command. For example, if this command was run with ",(0,o.kt)("inlineCode",{parentName:"p"},"mycli arg1 arg2")," it would be declared like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import {Args, Command} from '@oclif/core'\n\nexport class MyCLI extends Command {\n  static args = {\n    firstArg: Args.string(),\n    secondArg: Args.string(),\n  }\n\n  async run() {\n    // can get args as an object\n    const {args} = await this.parse(MyCLI)\n    this.log(`running my command with args: ${args.firstArg}, ${args.secondArg}`)\n    // can also get the args as an array\n    const {argv} = await this.parse(MyCLI)\n    this.log(`running my command with args: ${argv[0]}, ${argv[1]}`)\n  }\n}\n")),(0,o.kt)("p",null,"Here are the options arguments can have:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"static args = {\n  firstArg: Args.string(\n    {\n      name: 'file',               // name of arg to show in help and reference with args[name]\n      required: false,            // make the arg required with `required: true`\n      description: 'output file', // help description\n      hidden: true,               // hide this arg from help\n      parse: input => 'output',   // instead of the user input, return a different value\n      default: 'world',           // default value if no arg input\n      options: ['a', 'b'],        // only allow input to be from a discrete set\n    }\n  ),\n}\n")),(0,o.kt)("p",null,"Here are the types of args that ",(0,o.kt)("inlineCode",{parentName:"p"},"Args")," exports:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"string"),(0,o.kt)("li",{parentName:"ul"},"integer"),(0,o.kt)("li",{parentName:"ul"},"boolean"),(0,o.kt)("li",{parentName:"ul"},"url"),(0,o.kt)("li",{parentName:"ul"},"file"),(0,o.kt)("li",{parentName:"ul"},"directory"),(0,o.kt)("li",{parentName:"ul"},"custom")),(0,o.kt)("p",null,"For variable length arguments, disable argument validation with ",(0,o.kt)("inlineCode",{parentName:"p"},"static strict = false")," on the command."))}g.isMDXComponent=!0}}]);