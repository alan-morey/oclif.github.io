"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[55],{7780:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>i});var a=s(4848),t=s(8453);const o={title:"Custom Base Class"},r=void 0,c={id:"base_class",title:"Custom Base Class",description:"Use inheritance to share functionality between common commands. Here is an example of a command base class that has some common shared flags.",source:"@site/../docs/base_class.md",sourceDirName:".",slug:"/base_class",permalink:"/docs/base_class",draft:!1,unlisted:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/base_class.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:1710860746,formattedLastUpdatedAt:"Mar 19, 2024",frontMatter:{title:"Custom Base Class"},sidebar:"docs",previous:{title:"NSIS Installer Customization",permalink:"/docs/nsis-installer_customization"},next:{title:"Prompting",permalink:"/docs/prompting"}},l={},i=[];function m(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Use inheritance to share functionality between common commands. Here is an example of a command base class that has some common shared flags."}),"\n",(0,a.jsx)(n.p,{children:"For large CLIs with multiple plugins, it's useful to put this base class into its own npm package to be shared."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// src/baseCommand.ts\nimport {Command, Flags, Interfaces} from '@oclif/core'\n\nenum LogLevel {\n  debug = 'debug',\n  info = 'info',\n  warn = 'warn',\n  error = 'error',\n}\n\nexport type Flags<T extends typeof Command> = Interfaces.InferredFlags<typeof BaseCommand['baseFlags'] & T['flags']>\nexport type Args<T extends typeof Command> = Interfaces.InferredArgs<T['args']>\n\nexport abstract class BaseCommand<T extends typeof Command> extends Command {\n  // add the --json flag\n  static enableJsonFlag = true\n\n  // define flags that can be inherited by any command that extends BaseCommand\n  static baseFlags = {\n    'log-level': Flags.custom<LogLevel>({\n      summary: 'Specify level for logging.',\n      options: Object.values(LogLevel),\n      helpGroup: 'GLOBAL',\n    })(),\n  }\n\n  protected flags!: Flags<T>\n  protected args!: Args<T>\n\n  public async init(): Promise<void> {\n    await super.init()\n    const {args, flags} = await this.parse({\n      flags: this.ctor.flags,\n      baseFlags: (super.ctor as typeof BaseCommand).baseFlags,\n      enableJsonFlag: this.ctor.enableJsonFlag,\n      args: this.ctor.args,\n      strict: this.ctor.strict,\n    })\n    this.flags = flags as Flags<T>\n    this.args = args as Args<T>\n  }\n\n  protected async catch(err: Error & {exitCode?: number}): Promise<any> {\n    // add any custom logic to handle errors from the command\n    // or simply return the parent class error handling\n    return super.catch(err)\n  }\n\n  protected async finally(_: Error | undefined): Promise<any> {\n    // called after run and catch regardless of whether or not the command errored\n    return super.finally(_)\n  }\n}\n\n// src/commands/my-command.ts\n\nexport default class MyCommand extends BaseCommand<typeof MyCommand> {\n  static summary = 'child class that extends BaseCommand'\n\n  static examples = [\n    '<%= config.bin %> <%= command.id %>',\n    '<%= config.bin %> <%= command.id %> --json',\n    '<%= config.bin %> <%= command.id %> --log-level debug',\n  ]\n\n  static flags = {\n    name: Flags.string({\n      char: 'n',\n      summary: 'Name to print.',\n      required: true,\n    }),\n  }\n\n  public async run(): Promise<Flags<typeof MyCommand>> {\n    for (const [flag, value] of Object.entries(this.flags)) {\n      this.log(`${flag}: ${value}`)\n    }\n\n    return this.flags\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["For a more complex example, ",(0,a.jsx)(n.a,{href:"https://github.com/salesforcecli/sf-plugins-core/blob/main/src/sfCommand.ts",children:"here's"})," how we do this for the Salesforce CLI."]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var a=s(6540);const t={},o=a.createContext(t);function r(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);