"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9604],{2391:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=t(4848),s=t(8453);const a={title:"Command Arguments"},i=void 0,o={id:"args",title:"Command Arguments",description:"Arguments are positional arguments passed to the command. For example, if this command was run with mycli arg1 arg2 it would be declared like this:",source:"@site/../docs/args.md",sourceDirName:".",slug:"/args",permalink:"/docs/args",draft:!1,unlisted:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/args.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:1711121897,formattedLastUpdatedAt:"Mar 22, 2024",frontMatter:{title:"Command Arguments"},sidebar:"docs",previous:{title:"Commands",permalink:"/docs/commands"},next:{title:"Command Flags",permalink:"/docs/flags"}},c={},l=[];function d(e){const n={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Arguments are positional arguments passed to the command. For example, if this command was run with ",(0,r.jsx)(n.code,{children:"mycli arg1 arg2"})," it would be declared like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import {Args, Command} from '@oclif/core'\n\nexport class MyCLI extends Command {\n  static args = {\n    firstArg: Args.string(),\n    secondArg: Args.string(),\n  }\n\n  async run() {\n    // can get args as an object\n    const {args} = await this.parse(MyCLI)\n    this.log(`running my command with args: ${args.firstArg}, ${args.secondArg}`)\n    // can also get the args as an array\n    const {argv} = await this.parse(MyCLI)\n    this.log(`running my command with args: ${argv[0]}, ${argv[1]}`)\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Here are the options arguments can have:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"static args = {\n  firstArg: Args.string(\n    {\n      name: 'file',               // name of arg to show in help and reference with args[name]\n      required: false,            // make the arg required with `required: true`\n      description: 'output file', // help description\n      hidden: true,               // hide this arg from help\n      parse: input => 'output',   // instead of the user input, return a different value\n      default: 'world',           // default value if no arg input\n      options: ['a', 'b'],        // only allow input to be from a discrete set\n    }\n  ),\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Here are the types of args that ",(0,r.jsx)(n.code,{children:"Args"})," exports:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"string"}),"\n",(0,r.jsx)(n.li,{children:"integer"}),"\n",(0,r.jsx)(n.li,{children:"boolean"}),"\n",(0,r.jsx)(n.li,{children:"url"}),"\n",(0,r.jsx)(n.li,{children:"file"}),"\n",(0,r.jsx)(n.li,{children:"directory"}),"\n",(0,r.jsx)(n.li,{children:"custom"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For variable length arguments, disable argument validation with ",(0,r.jsx)(n.code,{children:"static strict = false"})," on the command."]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);