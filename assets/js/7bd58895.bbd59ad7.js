"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7071],{6362:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var s=t(4848),r=t(8453);const o={title:"Prompting"},i=void 0,a={id:"prompting",title:"Prompting",description:"The ux export provides a simple cli.prompt() function, for more complex input prompts, we recommend using the inquirer library.",source:"@site/../docs/prompting.md",sourceDirName:".",slug:"/prompting",permalink:"/docs/prompting",draft:!1,unlisted:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/prompting.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:1711121897,formattedLastUpdatedAt:"Mar 22, 2024",frontMatter:{title:"Prompting"},sidebar:"docs",previous:{title:"Custom Base Class",permalink:"/docs/base_class"},next:{title:"Spinner",permalink:"/docs/spinner"}},c={},p=[{value:"<code>ux.prompt()</code>",id:"uxprompt",level:2},{value:"<code>inquirer</code>",id:"inquirer",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://github.com/oclif/core/blob/main/src/cli-ux/README.md",children:"ux"})," export provides a simple ",(0,s.jsx)(n.code,{children:"cli.prompt()"})," function, for more complex input prompts, we recommend using the ",(0,s.jsx)(n.a,{href:"https://github.com/SBoudrias/Inquirer.js",children:"inquirer"})," library."]}),"\n",(0,s.jsx)(n.h2,{id:"uxprompt",children:(0,s.jsx)(n.code,{children:"ux.prompt()"})}),"\n",(0,s.jsxs)(n.p,{children:["Prompt for basic input with ",(0,s.jsx)(n.code,{children:"ux"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import {Command, ux} from '@oclif/core'\n\nexport class MyCommand extends Command {\n  async run() {\n    // just prompt for input\n    const name = await ux.prompt('What is your name?')\n\n    // mask input after enter is pressed\n    const secondFactor = await ux.prompt('What is your two-factor token?', {type: 'mask'})\n\n    // hide input while typing\n    const password = await ux.prompt('What is your password?', {type: 'hide'})\n\n    this.log(`You entered: ${name}, ${secondFactor}, ${password}`)\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Demo:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"prompt demo",src:t(164).A+"",width:"941",height:"605"})}),"\n",(0,s.jsx)(n.h2,{id:"inquirer",children:(0,s.jsx)(n.code,{children:"inquirer"})}),"\n",(0,s.jsxs)(n.p,{children:["Here is an example command that uses ",(0,s.jsx)(n.a,{href:"https://github.com/SBoudrias/Inquirer.js",children:"inquirer"}),". You will need to add ",(0,s.jsx)(n.code,{children:"inquirer"})," and ",(0,s.jsx)(n.code,{children:"@types/inquirer"})," (for TypeScript CLIs) for this to work."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import {Command, Flags} from '@oclif/core'\nimport * as inquirer from 'inquirer'\n\nexport class MyCommand extends Command {\n  static flags = {\n    stage: Flags.string({options: ['development', 'staging', 'production']})\n  }\n\n  async run() {\n    const {flags} = await this.parse(MyCommand)\n    let stage = flags.stage\n    if (!stage) {\n      let responses: any = await inquirer.prompt([{\n        name: 'stage',\n        message: 'select a stage',\n        type: 'list',\n        choices: [{name: 'development'}, {name: 'staging'}, {name: 'production'}],\n      }])\n      stage = responses.stage\n    }\n    this.log(`the stage is: ${stage}`)\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"NOTE"}),": inquirer >= v9 is an ESM package. If you aren't using ESM in your CLI/plugin, you should set ",(0,s.jsxs)(n.a,{href:"https://www.typescriptlang.org/tsconfig#moduleResolution",children:[(0,s.jsx)(n.code,{children:"moduleResolution"})," to ",(0,s.jsx)(n.code,{children:"node16"})]})," in your tsconfig.json and ",(0,s.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import",children:["import it using ",(0,s.jsx)(n.code,{children:"await import"})]}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import {Command, Flags} from '@oclif/core'\n\nexport class MyCommand extends Command {\n  static flags = {\n    stage: Flags.string({options: ['development', 'staging', 'production']})\n  }\n\n  async run() {\n    const {flags} = await this.parse(MyCommand)\n    let stage = flags.stage\n    if (!stage) {\n      const { default: inquirer } = await import(\"inquirer\")\n      let responses: any = inquirer.prompt([{\n        name: 'stage',\n        message: 'select a stage',\n        type: 'list',\n        choices: [{name: 'development'}, {name: 'staging'}, {name: 'production'}],\n      }])\n      stage = responses.stage\n    }\n    this.log(`the stage is: ${stage}`)\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Demo:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"inquirer demo",src:t(7915).A+"",width:"1254",height:"806"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},7915:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/inquirer_demo-4d4cd8f9cf0bf300a5b853a4beef5672.gif"},164:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/prompt_demo-7bc9d5f614fdad73636bec3c864aff15.gif"},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);