"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7199],{2331:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=n(4848),o=n(8453);const s={title:"Pretty Printable Errors"},i=void 0,a={permalink:"/blog/2020/07/01/pretty-printable-errors",source:"@site/blog/2020-07-01-pretty-printable-errors.md",title:"Pretty Printable Errors",description:"Often CLIs are used as handy tools and when things go wrong it\u2019s useful to have additional context. In oclif we have added a couple of additional properties that can show extra context to the users when an error is displayed. The code, ref and suggestions will now be displayed if they are included. This will work with an existing oclif CLI by adding the latest @oclif/errors and @oclif/core to the CLI's package.json dependencies.",date:"2020-07-01T00:00:00.000Z",formattedDate:"July 1, 2020",tags:[],readingTime:.995,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Pretty Printable Errors"},unlisted:!1,prevItem:{title:"oclif Summer Update",permalink:"/blog/2020/08/26/summer-update"},nextItem:{title:"Customizing Help in oclif",permalink:"/blog/2020/05/05/introducing-custom-help-classes"}},d={authorsImageUrls:[]},c=[];function l(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["Often CLIs are used as handy tools and when things go wrong it\u2019s useful to have additional context. In oclif we have added a couple of additional properties that can show extra context to the users when an error is displayed. The ",(0,r.jsx)(t.code,{children:"code"}),", ",(0,r.jsx)(t.code,{children:"ref"})," and ",(0,r.jsx)(t.code,{children:"suggestions"})," will now be displayed if they are included. This will work with an existing oclif CLI by adding the latest @oclif/errors and @oclif/core to the CLI's package.json dependencies."]}),"\n",(0,r.jsxs)(t.p,{children:["For example, using ",(0,r.jsx)(t.code,{children:"this.error"})," with the additional properties:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:'class TestError extends Command {\n  async run() {\n    this.error("An error has occurred!", {\n      code: "OCLIF_ERR",\n      ref: "https://oclif.io/docs/commands#thiserrormessage-string--error-options-code-string-exit-number",\n      suggestions: ["Use these extra properties to provide additional context"],\n    })\n  }\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"would result with the following output:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",children:"\u203a   Error: An error has occurred!\n\u203a   Code: OCLIF_ERR\n\u203a   Try this: Use these extra properties to provide additional context\n\u203a   Reference: https://oclif.io/docs/commands#thiserrormessage-string--error-options-code-string-exit-number\n"})}),"\n",(0,r.jsxs)(t.p,{children:["If these properties are not provided then nothing changes and the CLI will continue to display the single error message output as it did before. Additionally, as part of this exercise we\u2019ve added documentation around ",(0,r.jsx)(t.a,{href:"/docs/error_handling",children:"Error Handling in oclif"})," which should come in handy if the need arises to extend oclif\u2019s default handling of errors."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(6540);const o={},s=r.createContext(o);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);